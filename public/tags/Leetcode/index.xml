<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Leetcode - tag - James Blog</title>
        <link>http://localhost:36995/tags/Leetcode/</link>
        <description>Leetcode - tag - James Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 10 Mar 2025 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://localhost:36995/tags/Leetcode/" rel="self" type="application/rss+xml" /><item>
    <title>[ Leetcode 36 ] Valid Sudoku | Solution Approach &amp; Explanation</title>
    <link>http://localhost:36995/program/leetcode-36/</link>
    <pubDate>Mon, 10 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>http://localhost:36995/program/leetcode-36/</guid>
    <description><![CDATA[Given a 9×9 Sudoku board, check whether the Sudoku configuration is valid. The conditions for validity are:
Each row must not contain duplicate numbers from 1 to 9. Each column must not contain duplicate numbers from 1 to 9. Each 3×3 sub-box must not contain duplicate numbers from 1 to 9. The character &lsquo;.&rsquo; represents an empty cell and can be ignored. Link🔗：https://leetcode.com/problems/valid-sudoku/
Problem Analysis Essentially, we need to iterate through the entire board while minimizing the time spent checking for duplicate numbers.]]></description>
</item><item>
    <title>[ Leetcode 133 ] Clone Graph | Solution Approach &amp; Explanation</title>
    <link>http://localhost:36995/program/leetcode-133/</link>
    <pubDate>Sat, 08 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>http://localhost:36995/program/leetcode-133/</guid>
    <description><![CDATA[The task is to clone a graph, but we cannot directly return the pointer to the original graph.
Link🔗：https://leetcode.com/problems/clone-graph/
Solution - DFS This problem is essentially about using DFS to traverse the entire graph and clone all the nodes. The main challenge is where to store the cloned nodes during the DFS traversal.
Design of the visit map If we use the usual vector to track visited nodes, we will only know if a node has been visited but not where the cloned node is.]]></description>
</item><item>
    <title>[ Leetcode 200 ] Number of Islands | Solution Approach &amp; Explanation</title>
    <link>http://localhost:36995/program/leetcode-200/</link>
    <pubDate>Sat, 08 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>http://localhost:36995/program/leetcode-200/</guid>
    <description><![CDATA[Given a 2D array composed of &lsquo;1&rsquo; (land) and &lsquo;0&rsquo; (water), calculate the number of islands. An island is defined as a region of &lsquo;1&rsquo;s (land) connected either horizontally or vertically, surrounded by &lsquo;0&rsquo;s (water). Link🔗：https://leetcode.com/problems]]></description>
</item><item>
    <title>[ Data Structure ] Stack &amp; Monotone Stack | Core Concepts &amp; Leetcode Problems Analysis</title>
    <link>http://localhost:36995/program/stack/</link>
    <pubDate>Fri, 07 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>http://localhost:36995/program/stack/</guid>
    <description><![CDATA[A Stack is a Last In, First Out (LIFO) data structure, similar to stacking blocks. The key characteristic is that you can only access the top element, and removal also happens only from the top. You cannot directly access elements below the top.
Common Stack Operations in C++ STL :
stack&lt;int&gt;st; - Declare a stack st.push(value); - Insert an element at the top st.pop();	- Remove the top element (⚠️ Does not return the value) st.]]></description>
</item><item>
    <title>[ Leetcode 20 ] Valid Parentheses | Solution Approach &amp; Explanation</title>
    <link>http://localhost:36995/program/leetcode-20/</link>
    <pubDate>Thu, 06 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>http://localhost:36995/program/leetcode-20/</guid>
    <description><![CDATA[Given a string s containing only the characters (, ), {, }, [ and ], check whether the string forms a valid set of parentheses.
Link🔗：https://leetcode.com/problems/valid-parentheses/
Problem Analysis This is a classic First In, Last Out (FILO) problem, which makes a stack the ideal data structure for solving it. We also need to consider edge cases carefully.
Solution - Stack We use a stack while iterating through the string:
If we encounter a left parenthesis, we push it onto the stack.]]></description>
</item><item>
    <title>[ Leetcode 21 ] Merge Two Sorted Lists | Solution Approach &amp; Explanation</title>
    <link>http://localhost:36995/program/leetcode-21/</link>
    <pubDate>Thu, 06 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>http://localhost:36995/program/leetcode-21/</guid>
    <description><![CDATA[Given a positive integer array nums and a positive integer k, find the number of subarrays whose product is less than k.
Link🔗：https://leetcode.com/problems/merge-two-sorted-lists/
Problem Analysis This problem is straightforward if you think from a two-pointer perspective. The key is to carefully determine which node points to which, and which pointer moves forward.
Solution - Two Pointers We need a pointer cur to track the last merged node. We compare the values of list1 and list2, and link cur-&gt;next to the smaller one.]]></description>
</item><item>
    <title>[ Leetcode 227 ] Basic Calculator II | Solution Approach &amp; Explanation</title>
    <link>http://localhost:36995/program/leetcode-227/</link>
    <pubDate>Thu, 06 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>http://localhost:36995/program/leetcode-227/</guid>
    <description><![CDATA[Given a string containing non-negative integers, +, -, *, /, and spaces, evaluate its value while following the standard order of operations (multiplication and division before addition and subtraction). The use of eval() is not allowed.
Link🔗：https://leetcode.com/problems/basic-calculator-ii/
Problem Analysis Since multiplication and division must be processed before addition and subtraction, the problem requires handling Last In, First Out (LIFO) operations. This suggests that a stack would be an effective data structure to use.]]></description>
</item><item>
    <title>[ Leetcode 496 ] Next Greater Element I | Solution Approach &amp; Explanation</title>
    <link>http://localhost:36995/program/leetcode-496/</link>
    <pubDate>Thu, 06 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>http://localhost:36995/program/leetcode-496/</guid>
    <description><![CDATA[Given two arrays nums1 and nums2, where nums1 is a subset of nums2, we need to find the next greater element for each number in nums1 within nums2.
Link🔗：https://leetcode.com/problems/next-greater-element-i/
Problem Analysis The key challenge is how to efficiently find the next greater element for each number in nums1 without iterating over nums2 repeatedly. A brute-force approach would be too slow, so we need an optimized method.
Solution - Monotone Stack The design of the Monotone Stack fits perfectly for this problem because we can ensure that the numbers in the stack are always in decreasing order.]]></description>
</item><item>
    <title>[ Leetcode 739 ] Daily Temperatures | Solution Approach &amp; Explanation</title>
    <link>http://localhost:36995/program/leetcode-739/</link>
    <pubDate>Thu, 06 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>http://localhost:36995/program/leetcode-739/</guid>
    <description><![CDATA[Given an integer array temperatures, representing the temperature on each day, for each day, we need to find the nearest future day with a higher temperature and return the number of days between the current day and that day. If there is no higher temperature in the future, return 0.
Link🔗：https://leetcode.com/problems/daily-temperatures/
Problem Analysis The key to this problem is finding the next number greater than the current one, so we can directly think of using a Monotone Stack.]]></description>
</item><item>
    <title>[ Algorithm ] Sliding Window | Core Concepts &amp; Leetcode Problems Analysis</title>
    <link>http://localhost:36995/program/sliding-window/</link>
    <pubDate>Wed, 05 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>http://localhost:36995/program/sliding-window/</guid>
    <description><![CDATA[The Sliding Window technique utilizes two pointers, left and right, to maintain a dynamic range (window). By shifting this window, we can reduce redundant computations, making it particularly useful for problems involving subarrays or substrings.
Sliding Window is categorized into two types:
Fixed-Size Sliding Window Variable-Size Sliding Window Fixed-Size Sliding Window Used for problems that require subarrays or substrings of a fixed length. The window moves one step to the right at a time, removing the leftmost element and adding a new rightmost element.]]></description>
</item></channel>
</rss>
