<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Algorithm - category - James Blog</title>
        <link>https://jamesblogger.com/categories/Algorithm/</link>
        <description>Algorithm - category - James Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 05 Mar 2025 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://jamesblogger.com/categories/Algorithm/" rel="self" type="application/rss+xml" /><item>
    <title>[ Algorithm ] Sliding Window | Core Concepts &amp; Leetcode Problems Analysis</title>
    <link>https://jamesblogger.com/program/sliding-window/</link>
    <pubDate>Wed, 05 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>https://jamesblogger.com/program/sliding-window/</guid>
    <description><![CDATA[The Sliding Window technique utilizes two pointers, left and right, to maintain a dynamic range (window). By shifting this window, we can reduce redundant computations, making it particularly useful for problems involving subarrays or substrings.
Sliding Window is categorized into two types:
Fixed-Size Sliding Window Variable-Size Sliding Window Fixed-Size Sliding Window Used for problems that require subarrays or substrings of a fixed length. The window moves one step to the right at a time, removing the leftmost element and adding a new rightmost element.]]></description>
</item><item>
    <title>[ Leetcode 21 ] Merge Two Sorted Lists | Solution Approach &amp; Explanation</title>
    <link>https://jamesblogger.com/program/leetcode-21/</link>
    <pubDate>Wed, 05 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>https://jamesblogger.com/program/leetcode-21/</guid>
    <description><![CDATA[Given a positive integer array nums and a positive integer k, find the number of subarrays whose product is less than k.
LinküîóÔºöhttps://leetcode.com/problems/merge-two-sorted-lists/
Problem Analysis This problem is straightforward if you think from a two-pointer perspective. The key is to carefully determine which node points to which, and which pointer moves forward.
Solution - Two Pointers We need a pointer cur to track the last merged node. We compare the values of list1 and list2, and link cur-&gt;next to the smaller one.]]></description>
</item><item>
    <title>[ Leetcode 713 ] Subarray Product Less Than K | Ëß£È°åÊÄùË∑ØÂàÜ‰∫´</title>
    <link>https://jamesblogger.com/program/leetcode-713/</link>
    <pubDate>Wed, 05 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>https://jamesblogger.com/program/leetcode-713/</guid>
    <description><![CDATA[Given a positive integer array nums and a positive integer k, find the number of subarrays whose product is less than k. LinküîóÔºöhttps://leetcode.com/problems/subarray-pro]]></description>
</item><item>
    <title>[ Leetcode 1343 ] Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold | Solution Approach &amp; Explanation</title>
    <link>https://jamesblogger.com/program/leetcode-1343/</link>
    <pubDate>Mon, 03 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>https://jamesblogger.com/program/leetcode-1343/</guid>
    <description><![CDATA[Given an integer array nums, along with two integers k and threshold, find the number of subarrays of length k whose average is greater than or equal to threshold.
LinküîóÔºöhttps://leetcode.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold/
Problem Analysis The goal is to find all subarrays of length k that meet the given condition. This means we need to examine every subarray of length k.
Brute Force A straightforward approach is to enumerate all possible subarrays of length k.]]></description>
</item><item>
    <title>[ Leetcode 141 ] Linked List Cycle | Solution Approach &amp; Explanation</title>
    <link>https://jamesblogger.com/program/leetcode-141/</link>
    <pubDate>Mon, 03 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>https://jamesblogger.com/program/leetcode-141/</guid>
    <description><![CDATA[Given a linked list, determine whether it contains a cycle.
LinküîóÔºöhttps://leetcode.com/problems/linked-list-cycle/
Solution - Fast and Slow Pointers ( Floyd&rsquo;s Cycle Detection Algorithm ) This is one of the classic problems for detecting a cycle in a linked list. The idea is to use two pointers, where the fast pointer moves twice as fast as the slow pointer. If there is a cycle, the fast pointer will eventually catch up to the slow pointer.]]></description>
</item><item>
    <title>[ Leetcode 19 ] Remove Nth Node From End of List | Solution Approach &amp; Explanation</title>
    <link>https://jamesblogger.com/program/leetcode-19/</link>
    <pubDate>Mon, 03 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>https://jamesblogger.com/program/leetcode-19/</guid>
    <description><![CDATA[Given a linked list, we need to delete the Nth node from the end and return the updated linked list.
LinküîóÔºöhttps://leetcode.com/problems/remove-nth-node-from-end-of-list/
Problem Analysis The key challenge is efficiently finding the Nth node from the end since searching in a linked list takes O(n) time.
Brute Force A straightforward approach would be to iterate through the list once while numbering each node. After determining the index of the node to delete, we would iterate again to locate and remove it.]]></description>
</item><item>
    <title>[ Leetcode 3 ] Longest Substring Without Repeating Characters | Solution Approach &amp; Explanation</title>
    <link>https://jamesblogger.com/program/leetcode-3/</link>
    <pubDate>Mon, 03 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>https://jamesblogger.com/program/leetcode-3/</guid>
    <description><![CDATA[Given a string s, find the length of the longest substring without repeating characters.
LinküîóÔºöhttps://leetcode.com/problems/longest-substring-without-repeating-characters/
Problem Analysis The objective is to find the longest substring without repeating characters, meaning we must examine every possible substring.
Brute Force The most straightforward brute-force approach is to enumerate all possible substrings and check for repeated characters. However, this results in a time complexity of O(n¬≤), which is too slow and will cause time limit exceeded (TLE) errors.]]></description>
</item><item>
    <title>[ Leetcode 876 ] Middle of the Linked List | Solution Approach &amp; Explanation</title>
    <link>https://jamesblogger.com/program/leetcode-876/</link>
    <pubDate>Mon, 03 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>https://jamesblogger.com/program/leetcode-876/</guid>
    <description><![CDATA[Given a linked list, return the middle node. LinküîóÔºöhttps://leetcode.com/problems/middle-of-the-linked-list/]]></description>
</item><item>
    <title>[ Leetcode 1143 ] Longest Common Subsequence | Solution Approach &amp; Explanation</title>
    <link>https://jamesblogger.com/program/leetcode-1143/</link>
    <pubDate>Sat, 01 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>https://jamesblogger.com/program/leetcode-1143/</guid>
    <description><![CDATA[Given two strings, text1 and text2, find the length of their Longest Common Subsequence (LCS).
‚ö†Ô∏è Note:
A subsequence does not need to be contiguous but must maintain the original order. If there is no common subsequence, return 0. LinküîóÔºöhttps://leetcode.com/problems/longest-common-subsequence/
Solution - DP (Double-Sequence Linear DP Problem) This problem can be solved using Double-Sequence Linear DP, as the input consists of two strings. We define dp[i+1][j+1] to represent the length of the longest common subsequence (LCS) ending at text1[i] and text2[j].]]></description>
</item><item>
    <title>[ Leetcode 11 ] Container With Most Water | Solution Approach &amp; Explanation</title>
    <link>https://jamesblogger.com/program/leetcode-11/</link>
    <pubDate>Thu, 27 Feb 2025 00:00:00 &#43;0000</pubDate><author>
        <name>James</name>
    </author><guid>https://jamesblogger.com/program/leetcode-11/</guid>
    <description><![CDATA[In a given array, each element represents the height of a vertical line. The task is to choose two lines such that the container formed with the x-axis can hold the maximum amount of water and return that maximum volume.
LinküîóÔºöhttps://leetcode.com/problems/container-with-most-water/
Solution - Opposite Direction Two Pointers The key idea is that the area of the container is determined by:
Area = min(Height of left, Height of right) √ó Distance between them We aim to find two lines that maximize this area.]]></description>
</item></channel>
</rss>
